{"version":3,"sources":["TreeContext.js","ListItem.js","selectors.js","List.js","reducers.js","TreeProvider.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ListItem","this","context","removeItem","moveUp","moveDown","addSublist","removeSublist","props","id","canMoveUp","name","canMoveDown","hasSublist","onClick","parentId","PureComponent","contextType","TreeContext","List","renderListItems","listItems","data","filter","item","getListItemsByParentId","map","itemIndex","key","length","handleNewListItemNameInput","e","setState","newListItemName","target","value","isValidNewListItemName","state","addItem","placeholder","type","onChange","disabled","Component","arrayIndexOf","array","fn","i","idCounter","getPrevItemIndexByItemIndex","paramItem","allPrevItems","slice","getNextItemIndexByItemIndex","allNextItems","TreeProvider","concat","listItemId","currentItemIndex","currentItem","prevItemIndex","prevItem","nextItemIndex","nextItem","console","log","undefined","providerValue","Provider","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1105ab27.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst ThemeContext = createContext(\"light\");\nexport default ThemeContext;\n","import React, { PureComponent } from 'react'\nimport List from './List'\nimport TreeContext from './TreeContext'\n\nexport default class ListItem extends PureComponent {\n  render() {\n    const { removeItem, moveUp, moveDown, addSublist, removeSublist } = this.context\n\n    const { id, name, canMoveUp, canMoveDown, hasSublist } = this.props\n\n    return (\n      <li>\n        <span>{this.props.name}</span>\n        { canMoveUp && <button onClick={() => moveUp(id)}>&uarr;</button> }\n        { canMoveDown && <button onClick={() => moveDown(id)}>&darr;</button> }\n        {\n          hasSublist\n          ?\n            <button onClick={() => removeSublist(id)}>Remove Sublist</button>\n          :\n            <button onClick={() => addSublist(id)}>Add Sublist</button>\n        }\n        <button onClick={() => removeItem(id)}>Remove</button>\n        { hasSublist &&\n          <List\n            parentId={id}\n          />\n        }\n      </li>\n    );\n  }\n}\n\nListItem.contextType = TreeContext\n","const getListItemsByParentId = (data, parentId) => {\n  return data.filter(item => item.parentId === parentId)\n}\n\nexport {\n  getListItemsByParentId\n}\n","import React, { Component } from 'react'\nimport ListItem from './ListItem'\nimport { getListItemsByParentId } from './selectors'\nimport TreeContext from './TreeContext'\n\nexport default class List extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newListItemName: ''\n    }\n  }\n\n  renderListItems = () => {\n    const { data } = this.context\n    const listItems = getListItemsByParentId(data, this.props.parentId)\n\n    if (!listItems) return []\n\n    return listItems.map( (item, itemIndex) => (\n        <ListItem\n          key={item.id}\n          id={item.id}\n          name={item.name}\n          hasSublist={item.hasSublist}\n          canMoveUp={itemIndex > 0}\n          canMoveDown={itemIndex < listItems.length - 1}\n        />\n      )\n    )\n  }\n\n  handleNewListItemNameInput = (e) => {\n    this.setState({newListItemName: e.target.value})\n  }\n\n  isValidNewListItemName = () => {\n    return !!this.state.newListItemName\n  }\n\n  addItem = () => {\n    this.context.addItem(this.props.parentId, this.state.newListItemName);\n    this.setState({newListItemName: ''})\n  }\n\n  render() {\n    return (\n      <ul>\n        { this.renderListItems() }\n\n        <li>\n          <input\n            placeholder=\"Enter name\"\n            type=\"text\"\n            onChange={this.handleNewListItemNameInput}\n            value={this.state.newListItemName}\n          />\n          <button\n            disabled={!this.isValidNewListItemName()}\n            onClick={this.addItem}\n          >\n            Add\n          </button>\n        </li>\n      </ul>\n    );\n  }\n}\n\nList.contextType = TreeContext\n","const findItemById = (data, id) => {\n  return data.find( item => item.id === id )\n}\n\nconst arrayIndexOf = (array, fn) => {\n  for (let i = 0; i < array.length; i++) {\n    if (fn(array[i])) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nlet idCounter = 1\n\nconst addItem = (data, parentId, name) => {\n  return data.concat({id: idCounter++, name, parentId})\n}\n\n// TODO: make recursive deletion of child lists\nconst removeItem = (data, id) => {\n  return data.filter(item => item.id !== id )\n}\n\nconst moveUp = (data, id) => {\n  const currentItemIndex = arrayIndexOf(data, item => item.id === id )\n  const currentItem = data[currentItemIndex]\n\n  const prevItemIndex = getPrevItemIndexByItemIndex(data, currentItemIndex)\n  const prevItem = data[prevItemIndex]\n\n  return data.map( (item, itemIndex) => {\n    if (itemIndex === prevItemIndex) {\n      return {...currentItem}\n    }\n    else if (itemIndex === currentItemIndex ) {\n      return {...prevItem}\n    }\n    else {\n      return item\n    }\n  })\n}\n\nconst moveDown = (data, id) => {\n  const currentItemIndex = arrayIndexOf(data, item => item.id === id )\n  const currentItem = data[currentItemIndex]\n\n  const nextItemIndex = getNextItemIndexByItemIndex(data, currentItemIndex)\n  const nextItem = data[nextItemIndex]\n\n  return data.map( (item, itemIndex) => {\n    if (itemIndex === nextItemIndex) {\n      return {...currentItem}\n    }\n    else if (itemIndex === currentItemIndex ) {\n      return {...nextItem}\n    }\n    else {\n      return item\n    }\n  })\n}\n\nconst addSublist = (data, listItemId) => {\n  console.log(\"reducers/addSublist: \", {data, listItemId})\n  return data.map( item => {\n    if (item.id === listItemId) {\n      return {\n        ...item,\n        hasSublist: true\n      }\n    }\n    else {\n      return item\n    }\n  })\n}\n\n// TODO: make recursive deletion of child lists\nconst removeSublist = (data, listItemId) => {\n  return data.map( item => {\n    if (item.id === listItemId) {\n      return {\n        ...item,\n        hasSublist: false\n      }\n    }\n    else if (item.parentId === listItemId) {\n      return undefined\n    }\n    else {\n      return item\n    }\n  }).filter( item => item !== undefined )\n}\n\nconst getPrevItemIndexByItemIndex = (data, itemIndex) => {\n  const paramItem = data[itemIndex]\n\n  const allPrevItems = data.slice(0, itemIndex)\n  for(let i = itemIndex - 1; i >= 0; i--) {\n    const item = allPrevItems[i]\n    if (item.parentId === paramItem.parentId ) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nconst getNextItemIndexByItemIndex = (data, itemIndex) => {\n  const paramItem = data[itemIndex]\n\n  const allNextItems = data.slice(itemIndex + 1)\n  for(let i = 0; i < allNextItems.length; i++) {\n    const item = allNextItems[i]\n    if (item.parentId === paramItem.parentId ) {\n      return itemIndex + 1 + i\n    }\n  }\n\n  return -1\n}\n\nexport {\n  addItem,\n  removeItem,\n  moveUp,\n  moveDown,\n  addSublist,\n  removeSublist\n}\n","import React, { Component } from 'react'\nimport { addItem, removeItem, moveUp, moveDown, addSublist, removeSublist } from './reducers'\nimport TreeContext from './TreeContext'\n\nexport default class TreeProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: []\n    }\n  }\n\n  addItem = (parentId, name) => {\n    const data = addItem(this.state.data, parentId, name)\n    this.setState({data})\n  }\n\n  removeItem = (id) => {\n    const data = removeItem(this.state.data, id)\n    this.setState({data})\n  }\n\n  moveUp = (listItemId) => {\n    const data = moveUp(this.state.data, listItemId)\n    this.setState({data})\n  }\n\n  moveDown = (listItemId) => {\n    const data = moveDown(this.state.data, listItemId)\n    this.setState({data})\n  }\n\n  addSublist = (listItemId) => {\n    console.log(\"RootList#addSublist: \", {listItemId})\n    const data = addSublist(this.state.data, listItemId)\n    this.setState({data})\n  }\n\n  removeSublist = (listItemId) => {\n    const data = removeSublist(this.state.data, listItemId)\n    this.setState({data})\n  }\n\n  render() {\n    const providerValue = {\n      data: this.state.data,\n      addItem: this.addItem,\n      removeItem: this.removeItem,\n      moveUp: this.moveUp,\n      moveDown: this.moveDown,\n      addSublist: this.addSublist,\n      removeSublist: this.removeSublist\n    }\n\n    return (\n      <TreeContext.Provider value={providerValue}>\n        { this.props.children }\n      </TreeContext.Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport List from './List';\nimport TreeProvider from './TreeProvider';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TreeProvider>\n      <List />\n    </TreeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}